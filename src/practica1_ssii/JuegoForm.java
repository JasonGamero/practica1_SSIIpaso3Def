
package practica1_ssii;

import java.awt.Color;
import java.io.File;
import java.util.LinkedList;
import java.util.Scanner;

/**
 *
 * @author Jason
 */
public class JuegoForm extends javax.swing.JApplet {

    /** Initializes the applet JuegoForm */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JuegoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JuegoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JuegoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JuegoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {

                @Override
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
        }

    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCrearArena = new javax.swing.JButton();

        jCrearArena.setText("Crear arena");
        jCrearArena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCrearArenaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(272, 272, 272)
                .addComponent(jCrearArena)
                .addContainerGap(296, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jCrearArena)
                .addContainerGap(450, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jCrearArenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCrearArenaActionPerformed
   LinkedList<Linea> obstaculos=new LinkedList<Linea>();
    int ancho=0, alto=0;
    Tablero tablero =  new Tablero(ancho, alto);
    Agente agente= new Agente(0,0);
    Scanner leer= new Scanner(System.in);
    String estrategia, heuristica, solucion, continuar, tamTable, fichero=null;
    Meta meta= new Meta(0,0);
    System.out.println("Seleccione el tablero con el que desea actuar: \n"
            + "    50 x 50 --> a \n"
            + "    300 x 300 --> b \n"
            + "    1500 x 1500 --> c ");
    tamTable= leer.nextLine();
    switch(tamTable.charAt(0)){
            case('a'): 
                fichero="problemaA.txt";
                break;
            case('b'):
                fichero="problemaB.txt";
                break;
            case('c'):
                fichero="problemaC.txt";
                break;
    }
    
    System.out.println("Seleccione la estrategia que desea seguir: \n"
            + "    anchura -----------------> a \n"
            + "    profundidad -------------> p \n"
            + "    profundidad iterativa  --> i\n"
            + "    A* ----------------------> h \n"
            + "    voraz -------------------> v \n");
    estrategia= leer.nextLine();

    if(estrategia.startsWith("h")|| estrategia.startsWith("v")){
        System.out.println("Seleccione la hueristica que prefiera: \n"
            + "    Distancia Manhattan --> m \n"
            + "    Distancia Euclidea --> e");
        heuristica= leer.nextLine();
    }else{
        heuristica= null;
    }
    cargarJuego(agente, meta, obstaculos, tablero, fichero);
    //---------------------------------------------------------------
    Problema problema= new Problema(meta.getX(), meta.getY());
    tablero.definirObstaculos(obstaculos);
    solucion= busquedaSoluciones(problema, estrategia, heuristica, 100000, agente, tablero, meta);
    System.out.println(solucion);

    
}//GEN-LAST:event_jCrearArenaActionPerformed

private void cargarJuego(Agente agente, Meta meta,LinkedList<Linea> obstaculos,Tablero tablero, String archivo){
    try{
        File fichero=new File(archivo);
        File arena;
        String identArena,identTxt;
        float x1= 0,y1=0, ancho, alto ,lBounce=0,lHard=0,lThick=0, xl1, yl1, xl2, yl2,cBounce=0,cHard=0,xc ,yc ,radius=0;
        Scanner datos= new Scanner (fichero);
        identTxt=datos.next();
        while(identTxt!=null){
            if(identTxt.equals("arena")){
                
                arena=new File(datos.next());
                Scanner leer= new Scanner(arena);
                identArena=leer.next();
                while (identArena!=null){
                    if (identArena.startsWith("b")){
                        x1=leer.nextFloat();
                        y1=leer.nextFloat();
                        ancho=leer.nextFloat();//solo necesitamos un par de coordenadas para crear el rectangulo
                        alto=leer.nextFloat();//solo necesitamos un par de coordenadas para crear el rectangulo
                        jPanel1.getGraphics().setColor(Color.blue);
                        jPanel1.getGraphics().drawRect(100, 100, (int)ancho, (int)alto);
                        tablero.setAncho((int)ancho+100);
                        tablero.setAlto((int) alto+100);
                        tablero.crearTablero(100, 100);
                        
                    }                

                    else if (identArena.startsWith("l")){
                        lBounce=leer.nextFloat();//este datos y los dos soguientes no se puede especificar 
                        lHard=leer.nextFloat();// con esta libreria de java
                        lThick=leer.nextFloat();
                        xl1=leer.nextFloat();
                        yl1=leer.nextFloat();
                        xl2=leer.nextFloat();
                        yl2=leer.nextFloat();
                        Linea linea= new Linea(xl1, yl1, xl2, yl2);
                        linea.recolocarCoordenadas(tablero.getAncho(), tablero.getAlto());
                        linea.pintarLinea(jPanel1.getGraphics());
                        obstaculos.add(linea);
                    }

                    if(leer.hasNext()){
                        identArena= leer.next();
                    }else{
                        identArena=null;
                    }
                }
            }
        
            //hacer meta de color distinto
            if (identTxt.equals("agente")){
                xc=datos.nextFloat();
                yc=datos.nextFloat();
                agente.setX(xc);
                agente.setY(yc);
                agente.recolocarAgente(tablero.getAncho(), tablero.getAlto());
                agente.pintarAgente(jPanel1.getGraphics());                
            }
            if (identTxt.equals("meta")){
                xc=datos.nextFloat();
                yc=datos.nextFloat();
                meta.setX(xc);
                meta.setY(yc);
                meta.recolocarMeta(tablero.getAncho(), tablero.getAlto());
                meta.pintarMeta(jPanel1.getGraphics());
            }
            if(datos.hasNext()){
                identTxt=datos.next();
            }else{
                identTxt=null;
            }
        }
                    
    }
    catch (Exception e) {
            System.out.println("Se produjo algun error: " + e.toString());
    }
}


private String busquedaSoluciones(Problema problema, String estrategia, String heuristica, 
        int maxProfundidad, Agente ag, Tablero tab, Meta meta){
    String resultado= null;
    boolean solucion= false;
    int prof=0;
    Nodo nodo= new Nodo(null,ag.getX(), ag.getY(), "inicio", 0, (int)ag.getCosto(), null, 0, heuristica);
    Nodo inicial= nodo;
    Arbol arbol= new Arbol(nodo);
    ColaPrioridad frontera= new ColaPrioridad();
    frontera.insertar(nodo);
    long tiempoInicio = System.currentTimeMillis();
    while(!frontera.esVacia()&& !solucion){
        nodo= frontera.buscarMin();

        if(!tab.casillaTablero((int) nodo.getX(), (int) nodo.getY()).isVisitiada()){
            tab.casillaTablero((int) nodo.getX(), (int) nodo.getY()).setVisitiada(true);
            
            if(!nodo.isMeta(meta) && nodo.getProfundidad()<maxProfundidad){
                switch(estrategia.charAt(0)){
                    case('a'): 
                        problema.busquedaAnchura(frontera, nodo, arbol,tab);
                        break;
                    case('p'):
                        problema.busquedaProfundidad(frontera, nodo, arbol, tab);
                        break;
                    case('i'):
                        prof=problema.busquedaProfIterativa(frontera, nodo, arbol, tab, meta, prof);
                        frontera.insertar(inicial);
                        break;
                    case('h'):
                        problema.busquedaHeuristica(frontera, nodo, arbol, tab);
                        break;
                    case('v'):
                        problema.busquedaVoraz(frontera, nodo, arbol, tab);
                        break;
                }
                ag.setX(nodo.getX());
                ag.setY(nodo.getY());
                ag.pintarAgente(jPanel1.getGraphics());
                frontera.eliminarMin();
            }else{ 
                if(nodo.isMeta(meta)){
                    solucion= true;
                }else{
                    frontera.vaciar();
                }
            }
        }else{
            frontera.eliminarMin();
        }
    }
    if(solucion){
        long tiempoGastado = System.currentTimeMillis()-tiempoInicio;
        long libre=Runtime.getRuntime().freeMemory();
        long total=Runtime.getRuntime().totalMemory();
        System.out.println("Tiempo gastado: "+tiempoGastado);
        System.out.println("Memoria consumida "+(total-libre) );
        System.out.println("hay solucion con un costo de "+nodo.getCosto());
        return resultado=ruta(nodo, ag);
    }else{
        return resultado="no hay solucion";
    }
}


private String ruta(Nodo ultimo, Agente ag){
    String camino=null;
    while(ultimo.getPadre()!=null){
        ag.setX(ultimo.getX());
        ag.setY(ultimo.getY());
        ag.pintarAgente(jPanel1.getGraphics());
        camino= ultimo.getAccion()+ " "+camino;
        ultimo= ultimo.getPadre();
    }
    camino=ultimo.getAccion()+ " "+ camino;
    return camino;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jCrearArena;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
